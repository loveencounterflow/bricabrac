{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/command-parser.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,SAAA,EAAA,GAAA,EAAA,UAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,WAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,OAHF,EAIE,GAJF,CAAA,GAI4B,GAAG,CAAC,GAJhC,EAbA;;;EAqBA,SAAA,GACE;IAAA,QAAA,EACE;MAAA,cAAA,EAAgB,uPAAhB;MAsBA,OAAA,EAAS,oPAtBT;MA4CA,OAAA,EAAS;IA5CT;EADF,EAtBF;;;EAsEA,UAAA,GAAa,QAAA,CAAE,IAAF,CAAA;AACb,QAAA,WAAA,EAAA,MAAA,EAAA,CAAA,EAAA,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA;IAAE,IAAO,CAAE,OAAO,IAAT,CAAA,KAAmB,QAA1B;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,uCAAA,CAAA,CAA0C,GAAA,CAAI,IAAJ,CAA1C,CAAA,CAAV,EADR;;AAEA;IAAA,KAAA,kBAAA;;MACE,IAAG,qCAAH;QACE,MAAA,GAAS,MAAM,CAAC,WAAP;;AAAqB;AAAA;UAAA,KAAA,SAAA;;yBAAA,CAAE,CAAF,cAAO,IAAI,IAAX;UAAA,CAAA;;YAArB;AACT,eAAO,CAAE,WAAF,EAAe,GAAA,MAAf,EAFT;;IADF;AAIA,WAAO;EAPI,EAtEb;;;EAgFA,MAAM,CAAC,OAAP,GAAiB,CAAE,UAAF,EAAc,SAAd;AAhFjB",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'bricabrac'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n\n\n#===========================================================================================================\ninternals =\n  patterns:\n    insert_replace: /// ^\n      (?<cmd_prefix> .*? )\n      <\n      <\n      <\n      (?<cmd_slash> \\/? )\n      (?<cmd_name> insert | replace-above | replace-below )\n      \\x20+\n      (src\\s*=\\s*)?(?<cmd_p1>\n        (?:\n          (?: ' (?: \\\\' | [^ ' ]  )+ ' ) |\n          (?: \" (?: \\\\\" | [^ \" ]  )+ \" ) |\n          (?: \\$ [a-zA-Z0-9]+          ) # insert JS identifier pattern\n          )\n        )\n      >\n      (?<cmd_user_eoi> [^ > ]* )\n      >\n      (?<cmd_system_eoi> [^ > ]* )\n      >\n      (?<cmd_suffix> .*? )\n      $ ///\n    publish: /// ^\n      (?<cmd_prefix> .*? )\n      <\n      <\n      <\n      (?<cmd_slash> \\/? )\n      (?<cmd_name> publish )\n      \\x20+\n      ( (?<cmd_disposition>   one   | enclosed  ) \\x20+ )?\n      (as\\s*=\\s*)?(?<cmd_p1>\n        (?:\n          (?: ' \\# (?: \\\\' | [^ ' ]  )+ ' ) |\n          (?: \" \\# (?: \\\\\" | [^ \" ]  )+ \" )\n          )\n        )\n      >\n      (?<cmd_user_eoi> [^ > ]* )\n      >\n      (?<cmd_system_eoi> [^ > ]* )\n      >\n      (?<cmd_suffix> .*? )\n      $ ///\n    similar: /// ^ (?<cmd_prefix> .*? ) <<< [^>]* >[^>]*>[^>]*> (?<cmd_suffix> .*? ) $ ///\n\n#-----------------------------------------------------------------------------------------------------------\nmatch_line = ( line ) ->\n  unless ( typeof line ) is 'string'\n    throw new Error \"Î©cmdprs_1 expected a line of text, got #{rpr line}\"\n  for cmd_pattern, pattern of internals.patterns\n    if ( match = line.match pattern )?\n      groups = Object.fromEntries ( [ k, ( v ? null ), ] for k, v of match.groups )\n      return { cmd_pattern, groups..., }\n  return null\n\n#===========================================================================================================\nmodule.exports = { match_line, internals, }\n"
  ]
}