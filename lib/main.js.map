{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'bricabrac'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n#...........................................................................................................\nFSE                       = require 'fs-extra'\nPATH                      = require 'node:path'\nA_trash                   = ( require 'trash' ).default\n{ DBay,\n  SQL,                  } = require 'dbay'\nCOMMAND_PARSER            = require './command-parser'\n{ Pipeline,             } = require 'moonriver'\n{ f,                    } = require 'effstring'\nSFMODULES                 = require 'bricabrac-single-file-modules'\n\n\n#===========================================================================================================\nget_cfg = ->\n  R = {}\n  R.source_path = '../../hengist-NG/assets/bricabrac/interpolation-1'\n  R.target_path = R.source_path.replace '/assets/', '/arena/'\n  #.........................................................................................................\n  R.source_path = PATH.resolve PATH.join __dirname, R.source_path\n  R.target_path = PATH.resolve PATH.join __dirname, R.target_path\n  #.........................................................................................................\n  R.main_path   = PATH.join R.target_path, 'main.md'\n  #.........................................................................................................\n  db_cfg =\n    path: '/dev/shm/bricabrac.db'\n  #.........................................................................................................\n  return R\n\n#===========================================================================================================\nA_prepare_arena = ->\n  cfg         = get_cfg()\n  #.........................................................................................................\n  whisper 'Ωbrbr___1', '—————————————————————————————————————————————————————————————————————'\n  urge    'Ωbrbr___2', \"trashing: #{cfg.target_path}\"\n  message = if ( await A_trash cfg.target_path )? then \"done\" else \"nothing to do\"\n  help    'Ωbrbr___3', \"trashing: #{message}\"\n  whisper 'Ωbrbr___4', '—————————————————————————————————————————————————————————————————————'\n  urge    'Ωbrbr___5', \"copying from: #{cfg.source_path}\"\n  urge    'Ωbrbr___6', \"copying   to: #{cfg.target_path}\"\n  FSE.copySync cfg.source_path, cfg.target_path, { overwrite: false, errorOnExist: true, dereference: true, }\n  help    'Ωbrbr___7', \"copying: done\"\n  whisper 'Ωbrbr___8', '—————————————————————————————————————————————————————————————————————'\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\nprepare_db = ->\n  cfg = get_cfg()\n  db  = new DBay cfg.db_cfg\n  #.........................................................................................................\n  db SQL\"\"\"drop table if exists sources;\"\"\"\n  db SQL\"\"\"drop table if exists lines;\"\"\"\n  db SQL\"\"\"drop table if exists cmds;\"\"\"\n  db SQL\"\"\"create table sources (\n    source_id               integer not null,\n    source_path             text    not null,\n    unique ( source_path ),\n    primary key ( source_id ) ); \"\"\"\n  db SQL\"\"\"create table lines (\n    source_id               integer not null,\n    line_nr                 integer not null,\n    line_text               text    not null,\n    foreign key ( source_id ) references sources,\n    primary key ( source_id, line_nr ) ); \"\"\"\n  db SQL\"\"\"create table cmds (\n    source_id               integer not null,\n    line_nr                 integer not null,\n    cmd_role                text    not null,\n    cmd_pattern             text    not null,\n    cmd_prefix              text    not null,\n    cmd_slash               text    not null,\n    cmd_name                text    not null,\n    cmd_disposition         text        null,\n    cmd_p1                  text    not null,\n    cmd_user_eoi            text    not null,\n    cmd_system_eoi          text    not null,\n    cmd_suffix              text    not null,\n    -- cmd_extent indicates count of lines to be replaced plus one (including line with openening *and* line\n    -- with closing cmd, if any:\n    -- * positive for lines below,\n    -- * negatives above;\n    -- * zero indicates no insertion / replacement / export\n    -- * plus one means insert between cmd line and adjacent line below, *preserving* adjacent line\n    -- * plus two means replace open cmd line and one plain line\n    cmd_extent              integer not null default 0,\n    foreign key ( source_id, line_nr ) references lines,\n    primary key ( source_id, line_nr ) ); \"\"\"\n  #.........................................................................................................\n  return db\n\n#===========================================================================================================\nA_demo_dbay = ->\n  await         A_prepare_arena()\n  cfg         = get_cfg()\n  db          = prepare_db()\n  #.........................................................................................................\n  run_pipeline db\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\nrun_pipeline = ( db ) ->\n  cfg           = get_cfg()\n  # #.........................................................................................................\n  # insert_source = SQL\"\"\"\n  #   insert into sources ( source_path )\n  #     values ( $source_path )\n  #     returning *;\"\"\"\n  # #.........................................................................................................\n  # insert_line = SQL\"\"\"\n  #   insert into lines ( source_id, line_nr, line_text )\n  #     values ( $source_id, $line_nr, $line_text );\"\"\"\n  #.........................................................................................................\n  # insert_cmd = SQL\"\"\"\n  #   insert into cmds ( source_id, line_nr, cmd_name, cmd_p1 )\n  #     values ( $source_id, $line_nr, $cmd_name, $cmd_p1 );\"\"\"\n  insert_source = db.create_insert { into: 'sources', exclude: [ 'source_id', ], returning: '*', }\n  insert_line   = db.create_insert { into: 'lines',   }\n  insert_cmd    = db.create_insert { into: 'cmds',    }\n  #.........................................................................................................\n  P =\n    #.......................................................................................................\n    $db_insert_source: -> ( { source_path, }, send ) =>\n      # source_id = 1\n      { source_id, } = db.alt.first_row insert_source, { source_path, }\n      send { source_id, source_path, }\n    #.......................................................................................................\n    $walk_lines_with_positions: -> ( { source_id, source_path, }, send ) =>\n      for { lnr: line_nr, line: line_text, eol, } from GUY.fs.walk_lines_with_positions source_path\n        send { source_id, line_nr, line_text, }\n      return null\n    #.......................................................................................................\n    $insert_line: -> ( line, send ) =>\n      # debug 'Ωbrbr___9', line\n      db.alt insert_line, line\n      send line\n    #.......................................................................................................\n    $parse_cmd: -> ( d, send ) =>\n      return send d unless ( match = COMMAND_PARSER.match_line d.line_text )?\n      d                   = { d..., match..., }\n      # warn 'Ωbrbr__10', GUY.trm.red GUY.trm.reverse GUY.trm.bold d.cmd_pattern\n      d.cmd_role          = if d.cmd_slash is '/' then 'close' else 'open'\n      d.cmd_disposition  ?= null\n      d.cmd_extent       ?= 0\n      d.p1_name           = switch d.cmd_name\n        when 'insert'         then  'src'\n        when 'replace-above'  then  'src'\n        when 'replace-below'  then  'src'\n        when 'publish'        then  'as'\n        else                        './.'\n      send d\n    #.......................................................................................................\n    $insert_cmd: -> ( d, send ) =>\n      return send d unless d.cmd_name?\n      db.alt insert_cmd, d\n      send d\n    #.......................................................................................................\n    $show: ->\n      SFMODULES_dev = require '../../bricabrac-single-file-modules'\n      { ansi_colors_and_effects: C, } = SFMODULES_dev.require_ansi_colors_and_effects()\n      color       = C.black\n      bg_color    = C.bg_gainsboro\n      error       = \"#{C.bg_pink} no match #{color}#{bg_color}\"\n      fmt_header  = ( x ) -> \"#{C.bold}#{C.italic} #{x} #{C.bold0}#{C.italic0}#{color}#{bg_color}\"\n      fmt_value   = ( x ) ->\n        switch x\n          when ''         then  ''\n          when undefined  then  \"#{C.red} U #{color}\"\n          when null       then  \"#{C.red} N #{color}\"\n          # when error      then  x\n          else                  rpr x\n      print_row = ( row, { is_header, } ) ->\n        fmt = if is_header then fmt_header else fmt_value\n        echo '' +\n          f\"#{color+bg_color}│\"                                             +\n          f\"#{C.overline1}\"                                                 +\n          f\"#{ fmt row.cmd_pattern                }:<20c;│\"                 +\n          f\"#{ fmt row.cmd_role                   }:<20c;│\"                 +\n          f\"#{ fmt row.cmd_prefix                 }:<20c;│\"                 +\n          f\"#{ fmt row.cmd_slash                  }:<11c;│\"                 +\n          f\"#{ fmt row.cmd_name                   }:<15c;│\"                 +\n          f\"#{ fmt row.cmd_disposition            }:<10c;│\"                 +\n          f\"#{ row.p1_name + ':'}:<10c;#{fmt row.cmd_p1 }:<40c;│\"                 +\n          f\"#{ fmt row.cmd_user_eoi               }:<10c;│\"                 +\n          f\"#{ fmt row.cmd_system_eoi             }:<10c;│\"                 +\n          f\"#{ fmt row.cmd_suffix                 }:<10c;\"                  +\n          f\"#{ C.overline0                        }│#{C.default+C.bg_default}\"\n      header =\n        cmd_pattern: 'cmd_pattern',\n        cmd_role:         'role',\n        cmd_pattern:      'pattern',\n        cmd_prefix:       'prefix',\n        cmd_slash:        'slash',\n        cmd_name:         'name',\n        cmd_disposition:  'disp.',\n        p1_name:          'p1_name',\n        cmd_p1:           'p1',\n        cmd_user_eoi:     'uEOI',\n        cmd_system_eoi:   'sEOI',\n        cmd_suffix:       'suffix'\n      print_row header, { is_header: true, }\n      #.....................................................................................................\n      return ( d ) =>\n        # whisper 'Ωbrbr__11', d.source_id, d.line_nr, d.line_text\n\n        # if ( match = d.line_text.match COMMAND_PARSER.internals.patterns.similar )?\n        #   debug 'Ωbrbr__12', ( GUY.trm.white GUY.trm.reverse GUY.trm.bold d.line_text ), { match.groups..., }\n        if d.cmd_pattern?\n          print_row d, { is_header: false, }\n          # help 'Ωbrbr__13',\n          #   d.cmd_role,\n          #   d.cmd_pattern,\n          #   d.cmd_prefix,\n          #   d.cmd_slash,\n          #   d.cmd_name,\n          #   d.cmd_disposition,\n          #   d.cmd_p1,\n          #   d.cmd_user_eoi,\n          #   d.cmd_system_eoi,\n          #   d.cmd_suffix\n        return null\n  #.........................................................................................................\n  collector = []\n  p         = new Pipeline()\n  p.push [ { source_path: cfg.main_path, }, ]\n  p.push P.$db_insert_source()\n  p.push P.$walk_lines_with_positions()\n  p.push P.$insert_line()\n  p.push P.$parse_cmd()\n  p.push P.$insert_cmd()\n  p.push P.$show()\n  # p.push ( d, send ) -> collector.push d #; help collector\n  p.run()\n  echo '—————————————————————————————————————————————————————————————————————'\n  debug 'Ωbrbr__14', \"sources:\"\n  urge 'Ωbrbr__15', row for row from db SQL\"\"\"select * from sources;\"\"\"\n  debug 'Ωbrbr__16', \"lines:\"\n  help 'Ωbrbr__17', row for row from db SQL\"\"\"select * from lines limit 10;\"\"\"\n  debug 'Ωbrbr__18', \"cmds:\"\n  info 'Ωbrbr__19', row for row from db SQL\"\"\"select * from cmds;\"\"\"\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  await A_demo_dbay()\n  return null\n\n"
  ]
}