{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'bricabrac'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n#...........................................................................................................\nFSE                       = require 'fs-extra'\nPATH                      = require 'node:path'\nA_trash                   = ( require 'trash' ).default\n{ DBay,\n  SQL,                  } = require 'dbay'\nCOMMAND_PARSER            = require './command-parser'\n{ Pipeline,             } = require 'moonriver'\n\n\n#===========================================================================================================\nget_cfg = ->\n  R = {}\n  R.source_path = '../../hengist-NG/assets/bricabrac/interpolation-1'\n  R.target_path = R.source_path.replace '/assets/', '/arena/'\n  #.........................................................................................................\n  R.source_path = PATH.resolve PATH.join __dirname, R.source_path\n  R.target_path = PATH.resolve PATH.join __dirname, R.target_path\n  #.........................................................................................................\n  R.main_path   = PATH.join R.target_path, 'main.md'\n  #.........................................................................................................\n  db_cfg =\n    path: '/dev/shm/bricabrac.db'\n  #.........................................................................................................\n  return R\n\n#===========================================================================================================\nA_prepare_arena = ->\n  cfg         = get_cfg()\n  #.........................................................................................................\n  whisper 'Ωbrbr___1', '—————————————————————————————————————————————————————————————————————'\n  urge    'Ωbrbr___2', \"trashing: #{cfg.target_path}\"\n  message = if ( await A_trash cfg.target_path )? then \"done\" else \"nothing to do\"\n  help    'Ωbrbr___3', \"trashing: #{message}\"\n  whisper 'Ωbrbr___4', '—————————————————————————————————————————————————————————————————————'\n  urge    'Ωbrbr___5', \"copying from: #{cfg.source_path}\"\n  urge    'Ωbrbr___6', \"copying   to: #{cfg.target_path}\"\n  FSE.copySync cfg.source_path, cfg.target_path, { overwrite: false, errorOnExist: true, dereference: true, }\n  help    'Ωbrbr___7', \"copying: done\"\n  whisper 'Ωbrbr___8', '—————————————————————————————————————————————————————————————————————'\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\nprepare_db = ->\n  cfg = get_cfg()\n  db  = new DBay cfg.db_cfg\n  #.........................................................................................................\n  db SQL\"\"\"drop table if exists sources;\"\"\"\n  db SQL\"\"\"drop table if exists lines;\"\"\"\n  db SQL\"\"\"drop table if exists cmds;\"\"\"\n  db SQL\"\"\"create table sources (\n    source_id               integer not null,\n    source_path             text    not null,\n    unique ( source_path ),\n    primary key ( source_id ) ); \"\"\"\n  db SQL\"\"\"create table lines (\n    source_id               integer not null,\n    line_nr                 integer not null,\n    line_text               text    not null,\n    foreign key ( source_id ) references sources,\n    primary key ( source_id, line_nr ) ); \"\"\"\n  db SQL\"\"\"create table cmds (\n    source_id               integer not null,\n    line_nr                 integer not null,\n    cmd_name                text    not null,\n    cmd_p1                  text    not null,\n    -- cmd_extent indicates count of lines to be replaced plus one (including line with openening *and* line\n    -- with closing cmd, if any:\n    -- * positive for lines below,\n    -- * negatives above;\n    -- * zero indicates no insertion / replacement / export\n    -- * plus one means insert between cmd line and adjacent line below, *preserving* adjacent line\n    -- * plus two means replace open cmd line and one plain line\n    cmd_extent              integer not null default 0,\n    foreign key ( source_id, line_nr ) references lines,\n    primary key ( source_id, line_nr ) ); \"\"\"\n  #.........................................................................................................\n  return db\n\n#===========================================================================================================\nA_demo_dbay = ->\n  await         A_prepare_arena()\n  cfg         = get_cfg()\n  db          = prepare_db()\n  #.........................................................................................................\n  run_pipeline db\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\nrun_pipeline = ( db ) ->\n  cfg           = get_cfg()\n  #.........................................................................................................\n  insert_source = SQL\"\"\"\n    insert into sources ( source_path )\n      values ( $source_path )\n      returning *;\"\"\"\n  #.........................................................................................................\n  insert_line = SQL\"\"\"\n    insert into lines ( source_id, line_nr, line_text )\n      values ( $source_id, $line_nr, $line_text );\"\"\"\n  #.........................................................................................................\n  insert_cmd = SQL\"\"\"\n    insert into cmds ( source_id, line_nr, cmd_name, cmd_p1 )\n      values ( $source_id, $line_nr, $cmd_name, $cmd_p1 );\"\"\"\n  #.........................................................................................................\n  P =\n    #.......................................................................................................\n    $db_insert_source: -> ( { source_path, }, send ) =>\n      # source_id = 1\n      { source_id, } = db.alt.first_row insert_source, { source_path, }\n      send { source_id, source_path, }\n    #.......................................................................................................\n    $walk_lines_with_positions: -> ( { source_id, source_path, }, send ) =>\n      for { lnr: line_nr, line: line_text, eol, } from GUY.fs.walk_lines_with_positions source_path\n        send { source_id, line_nr, line_text, }\n      return null\n    #.......................................................................................................\n    $insert_line: -> ( line, send ) =>\n      # debug 'Ωbrbr___9', line\n      db.alt insert_line, line\n      send line\n    #.......................................................................................................\n    $parse_cmd: -> ( d, send ) =>\n      return send d unless ( match = COMMAND_PARSER.match_line d.line_text )?\n      d                   = { d..., match..., }\n      d.cmd_role          = if d.cmd_slash is '/' then 'close' else 'open'\n      d.cmd_disposition  ?= null\n      send d\n    #.......................................................................................................\n    $insert_cmd: -> ( d, send ) =>\n      return send d unless d.cmd_name?\n      db.alt insert_cmd, d\n      send d\n    #.......................................................................................................\n    $show: -> ( d ) =>\n      # whisper 'Ωbrbr__10', d.source_id, d.line_nr, d.line_text\n      if ( match = d.line_text.match COMMAND_PARSER.internals.patterns.similar )?\n        debug 'Ωbrbr__11', ( GUY.trm.white GUY.trm.reverse GUY.trm.bold d.line_text ), { match.groups..., }\n      if d.cmd_name?\n        help 'Ωbrbr__12',\n          d.cmd_role,\n          d.cmd_pattern,\n          d.cmd_prefix,\n          d.cmd_slash,\n          d.cmd_name,\n          d.cmd_disposition,\n          d.cmd_p1,\n          d.cmd_user_eoi,\n          d.cmd_system_eoi,\n          d.cmd_suffix\n      return null\n  #.........................................................................................................\n  collector = []\n  p         = new Pipeline()\n  p.push [ { source_path: cfg.main_path, }, ]\n  p.push P.$db_insert_source()\n  p.push P.$walk_lines_with_positions()\n  p.push P.$insert_line()\n  p.push P.$parse_cmd()\n  p.push P.$insert_cmd()\n  p.push P.$show()\n  # p.push ( d, send ) -> collector.push d #; help collector\n  p.run()\n  echo '—————————————————————————————————————————————————————————————————————'\n  debug 'Ωbrbr__13', \"sources:\"\n  urge 'Ωbrbr__14', row for row from db SQL\"\"\"select * from sources;\"\"\"\n  debug 'Ωbrbr__15', \"lines:\"\n  help 'Ωbrbr__16', row for row from db SQL\"\"\"select * from lines limit 10;\"\"\"\n  debug 'Ωbrbr__17', \"cmds:\"\n  info 'Ωbrbr__18', row for row from db SQL\"\"\"select * from cmds;\"\"\"\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  await A_demo_dbay()\n  return null\n\n"
  ]
}