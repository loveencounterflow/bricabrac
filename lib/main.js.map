{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'bricabrac'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n#...........................................................................................................\nFSE                       = require 'fs-extra'\nPATH                      = require 'node:path'\nA_trash                   = ( require 'trash' ).default\n\n\n#===========================================================================================================\nget_cfg = ->\n  R = {}\n  R.source_path = '../../hengist-NG/assets/bricabrac/interpolation-1'\n  R.target_path = R.source_path.replace '/assets/', '/arena/'\n  #.........................................................................................................\n  R.source_path = PATH.resolve PATH.join __dirname, R.source_path\n  R.target_path = PATH.resolve PATH.join __dirname, R.target_path\n  #.........................................................................................................\n  R.main_path   = PATH.join R.target_path, 'main.md'\n  #.........................................................................................................\n  return R\n\n#===========================================================================================================\nA_prepare_arena = ->\n  cfg         = get_cfg()\n  #.........................................................................................................\n  whisper 'Ω___1', '—————————————————————————————————————————————————————————————————————'\n  urge    'Ω___2', \"trashing: #{cfg.target_path}\"\n  message = if ( await A_trash cfg.target_path )? then \"done\" else \"nothing to do\"\n  help    'Ω___3', \"trashing: #{message}\"\n  whisper 'Ω___4', '—————————————————————————————————————————————————————————————————————'\n  urge    'Ω___5', \"copying from: #{cfg.source_path}\"\n  urge    'Ω___6', \"copying   to: #{cfg.target_path}\"\n  FSE.copySync cfg.source_path, cfg.target_path, { overwrite: false, errorOnExist: true, dereference: true, }\n  help    'Ω___7', \"copying: done\"\n  whisper 'Ω___8', '—————————————————————————————————————————————————————————————————————'\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\nA_demo = ->\n  cfg         = get_cfg()\n  #.........................................................................................................\n  await A_prepare_arena()\n  for line from GUY.fs.walk_lines cfg.main_path\n    debug 'Ω___9', rpr line\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\ndemo_dbay = ->\n  { DBay, SQL, }          = require 'dbay'\n  debug 'Ω__10', SQL\"\"\"select * from sqlite_schema;\"\"\"\n  debug 'Ω__11', db = new DBay { path: '/dev/shm/bricabrac.db', }\n  db SQL\"\"\"create table sources (\n    id          integer not null,\n    path        text    not null\n    );\n    \"\"\"\n  db SQL\"\"\"create table lines (\n    source      integer not null,\n    lnr         integer not null,\n    line        text    not null,\n    foreign key ( source ) references sources ( id ),\n    primary key ( source, lnr )\n    );\n    \"\"\"\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  await A_demo()\n  await demo_dbay()\n  return null\n\n"
  ]
}