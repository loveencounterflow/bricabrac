{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,WAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,OAHF,EAIE,GAJF,CAAA,GAI4B,GAAG,CAAC,GAJhC,EAbA;;;EAqBA,IAAA,GAAO,MAAA,QAAA,CAAA,CAAA;AACP,QAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA;IAAE,GAAA,GAAc,OAAA,CAAQ,UAAR;IACd,IAAA,GAAc,OAAA,CAAQ,WAAR;IACd,WAAA,GAAc,CAAE,OAAA,CAAQ,OAAR,CAAF,CAAmB,CAAC,QAFpC;;IAIE,GAAA,GAAM,CAAA;IACN,GAAG,CAAC,WAAJ,GAAkB;IAClB,GAAG,CAAC,WAAJ,GAAkB,GAAG,CAAC,WAAW,CAAC,OAAhB,CAAwB,UAAxB,EAAoC,SAApC,EANpB;;IAQE,GAAG,CAAC,WAAJ,GAAkB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,GAAG,CAAC,WAAzB,CAAb;IAClB,GAAG,CAAC,WAAJ,GAAkB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,GAAG,CAAC,WAAzB,CAAb,EATpB;;IAWE,OAAA,CAAQ,OAAR,EAAiB,uEAAjB;IACA,IAAA,CAAQ,OAAR,EAAiB,CAAA,UAAA,CAAA,CAAa,GAAG,CAAC,WAAjB,CAAA,CAAjB;IACA,OAAA,GAAa,8CAAH,GAA+C,MAA/C,GAA2D;IACrE,IAAA,CAAQ,OAAR,EAAiB,CAAA,UAAA,CAAA,CAAa,OAAb,CAAA,CAAjB;IACA,OAAA,CAAQ,OAAR,EAAiB,uEAAjB;IACA,IAAA,CAAQ,OAAR,EAAiB,CAAA,cAAA,CAAA,CAAiB,GAAG,CAAC,WAArB,CAAA,CAAjB;IACA,IAAA,CAAQ,OAAR,EAAiB,CAAA,cAAA,CAAA,CAAiB,GAAG,CAAC,WAArB,CAAA,CAAjB;IACA,GAAG,CAAC,QAAJ,CAAa,GAAG,CAAC,WAAjB,EAA8B,GAAG,CAAC,WAAlC,EAA+C;MAAE,SAAA,EAAW,KAAb;MAAoB,YAAA,EAAc,IAAlC;MAAwC,WAAA,EAAa;IAArD,CAA/C;IACA,IAAA,CAAQ,OAAR,EAAiB,eAAjB;IACA,OAAA,CAAQ,OAAR,EAAiB,uEAAjB;AACA,WAAO;EAtBF,EArBP;;;EA+CA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA;MACtC,MAAM,IAAA,CAAA;AACN,aAAO;IAF+B,CAAA,IAAxC;;AA/CA",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'bricabrac'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n\n\n#===========================================================================================================\ndemo = ->\n  FSE         = require 'fs-extra'\n  PATH        = require 'node:path'\n  trash_async = ( require 'trash' ).default\n  #.........................................................................................................\n  cfg = {}\n  cfg.source_path = '../../hengist-NG/assets/bricabrac/interpolation-1'\n  cfg.target_path = cfg.source_path.replace '/assets/', '/arena/'\n  #.........................................................................................................\n  cfg.source_path = PATH.resolve PATH.join __dirname, cfg.source_path\n  cfg.target_path = PATH.resolve PATH.join __dirname, cfg.target_path\n  #.........................................................................................................\n  whisper 'Ω___1', '—————————————————————————————————————————————————————————————————————'\n  urge    'Ω___2', \"trashing: #{cfg.target_path}\"\n  message = if ( await trash_async cfg.target_path )? then \"done\" else \"nothing to do\"\n  help    'Ω___3', \"trashing: #{message}\"\n  whisper 'Ω___4', '—————————————————————————————————————————————————————————————————————'\n  urge    'Ω___5', \"copying from: #{cfg.source_path}\"\n  urge    'Ω___6', \"copying   to: #{cfg.target_path}\"\n  FSE.copySync cfg.source_path, cfg.target_path, { overwrite: false, errorOnExist: true, dereference: true, }\n  help    'Ω___7', \"copying: done\"\n  whisper 'Ω___8', '—————————————————————————————————————————————————————————————————————'\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  await demo()\n  return null\n\n"
  ]
}